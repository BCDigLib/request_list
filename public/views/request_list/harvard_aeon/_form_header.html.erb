<!-- <link href="<%= "/assets/datepicker.css" %>" media="all" rel="stylesheet" type="text/css"> -->

<!-- <%= javascript_include_tag 'bootstrap-datepicker' %> -->
<!-- <%= javascript_include_tag 'bootstrap-combobox' %> -->
<!-- <%= javascript_include_tag 'harvard_aeon_form' %> -->


<%# ##################### datepicker.css ##################### %>
<style>
  .datepicker {
    padding: 4px;
    -webkit-border-radius: 4px;
    -moz-border-radius: 4px;
    border-radius: 4px;
    direction: ltr;
  }
  .datepicker-inline {
    width: 220px;
  }
  .datepicker.datepicker-rtl {
    direction: rtl;
  }
  .datepicker.datepicker-rtl table tr td span {
    float: right;
  }
  .datepicker-dropdown {
    top: 0;
    left: 0;
  }
  .datepicker-dropdown:before {
    content: '';
    display: inline-block;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-bottom: 7px solid #ccc;
    border-top: 0;
    border-bottom-color: rgba(0, 0, 0, 0.2);
    position: absolute;
  }
  .datepicker-dropdown:after {
    content: '';
    display: inline-block;
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-bottom: 6px solid #ffffff;
    border-top: 0;
    position: absolute;
  }
  .datepicker-dropdown.datepicker-orient-left:before {
    left: 6px;
  }
  .datepicker-dropdown.datepicker-orient-left:after {
    left: 7px;
  }
  .datepicker-dropdown.datepicker-orient-right:before {
    right: 6px;
  }
  .datepicker-dropdown.datepicker-orient-right:after {
    right: 7px;
  }
  .datepicker-dropdown.datepicker-orient-top:before {
    top: -7px;
  }
  .datepicker-dropdown.datepicker-orient-top:after {
    top: -6px;
  }
  .datepicker-dropdown.datepicker-orient-bottom:before {
    bottom: -7px;
    border-bottom: 0;
    border-top: 7px solid #999;
  }
  .datepicker-dropdown.datepicker-orient-bottom:after {
    bottom: -6px;
    border-bottom: 0;
    border-top: 6px solid #ffffff;
  }
  .datepicker > div {
    display: none;
  }
  .datepicker.days div.datepicker-days {
    display: block;
  }
  .datepicker.months div.datepicker-months {
    display: block;
  }
  .datepicker.years div.datepicker-years {
    display: block;
  }
  .datepicker table {
    margin: 0;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }
  .datepicker td,
  .datepicker th {
    text-align: center;
    width: 20px;
    height: 20px;
    -webkit-border-radius: 4px;
    -moz-border-radius: 4px;
    border-radius: 4px;
    border: none;
  }
  .table-striped .datepicker table tr td,
  .table-striped .datepicker table tr th {
    background-color: transparent;
  }
  .datepicker table tr td.day:hover,
  .datepicker table tr td.day.focused {
    background: #eeeeee;
    cursor: pointer;
  }
  .datepicker table tr td.old,
  .datepicker table tr td.new {
    color: #999999;
  }
  .datepicker table tr td.disabled,
  .datepicker table tr td.disabled:hover {
    background: none;
    color: #999999;
    cursor: default;
  }
  .datepicker table tr td.today,
  .datepicker table tr td.today:hover,
  .datepicker table tr td.today.disabled,
  .datepicker table tr td.today.disabled:hover {
    background-color: #fde19a;
    background-image: -moz-linear-gradient(top, #fdd49a, #fdf59a);
    background-image: -ms-linear-gradient(top, #fdd49a, #fdf59a);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#fdd49a), to(#fdf59a));
    background-image: -webkit-linear-gradient(top, #fdd49a, #fdf59a);
    background-image: -o-linear-gradient(top, #fdd49a, #fdf59a);
    background-image: linear-gradient(top, #fdd49a, #fdf59a);
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fdd49a', endColorstr='#fdf59a', GradientType=0);
    border-color: #fdf59a #fdf59a #fbed50;
    border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
    filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);
    color: #000;
  }
  .datepicker table tr td.today:hover,
  .datepicker table tr td.today:hover:hover,
  .datepicker table tr td.today.disabled:hover,
  .datepicker table tr td.today.disabled:hover:hover,
  .datepicker table tr td.today:active,
  .datepicker table tr td.today:hover:active,
  .datepicker table tr td.today.disabled:active,
  .datepicker table tr td.today.disabled:hover:active,
  .datepicker table tr td.today.active,
  .datepicker table tr td.today:hover.active,
  .datepicker table tr td.today.disabled.active,
  .datepicker table tr td.today.disabled:hover.active,
  .datepicker table tr td.today.disabled,
  .datepicker table tr td.today:hover.disabled,
  .datepicker table tr td.today.disabled.disabled,
  .datepicker table tr td.today.disabled:hover.disabled,
  .datepicker table tr td.today[disabled],
  .datepicker table tr td.today:hover[disabled],
  .datepicker table tr td.today.disabled[disabled],
  .datepicker table tr td.today.disabled:hover[disabled] {
    background-color: #fdf59a;
  }
  .datepicker table tr td.today:active,
  .datepicker table tr td.today:hover:active,
  .datepicker table tr td.today.disabled:active,
  .datepicker table tr td.today.disabled:hover:active,
  .datepicker table tr td.today.active,
  .datepicker table tr td.today:hover.active,
  .datepicker table tr td.today.disabled.active,
  .datepicker table tr td.today.disabled:hover.active {
    background-color: #fbf069 \9;
  }
  .datepicker table tr td.today:hover:hover {
    color: #000;
  }
  .datepicker table tr td.today.active:hover {
    color: #fff;
  }
  .datepicker table tr td.range,
  .datepicker table tr td.range:hover,
  .datepicker table tr td.range.disabled,
  .datepicker table tr td.range.disabled:hover {
    background: #eeeeee;
    -webkit-border-radius: 0;
    -moz-border-radius: 0;
    border-radius: 0;
  }
  .datepicker table tr td.range.today,
  .datepicker table tr td.range.today:hover,
  .datepicker table tr td.range.today.disabled,
  .datepicker table tr td.range.today.disabled:hover {
    background-color: #f3d17a;
    background-image: -moz-linear-gradient(top, #f3c17a, #f3e97a);
    background-image: -ms-linear-gradient(top, #f3c17a, #f3e97a);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#f3c17a), to(#f3e97a));
    background-image: -webkit-linear-gradient(top, #f3c17a, #f3e97a);
    background-image: -o-linear-gradient(top, #f3c17a, #f3e97a);
    background-image: linear-gradient(top, #f3c17a, #f3e97a);
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#f3c17a', endColorstr='#f3e97a', GradientType=0);
    border-color: #f3e97a #f3e97a #edde34;
    border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
    filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);
    -webkit-border-radius: 0;
    -moz-border-radius: 0;
    border-radius: 0;
  }
  .datepicker table tr td.range.today:hover,
  .datepicker table tr td.range.today:hover:hover,
  .datepicker table tr td.range.today.disabled:hover,
  .datepicker table tr td.range.today.disabled:hover:hover,
  .datepicker table tr td.range.today:active,
  .datepicker table tr td.range.today:hover:active,
  .datepicker table tr td.range.today.disabled:active,
  .datepicker table tr td.range.today.disabled:hover:active,
  .datepicker table tr td.range.today.active,
  .datepicker table tr td.range.today:hover.active,
  .datepicker table tr td.range.today.disabled.active,
  .datepicker table tr td.range.today.disabled:hover.active,
  .datepicker table tr td.range.today.disabled,
  .datepicker table tr td.range.today:hover.disabled,
  .datepicker table tr td.range.today.disabled.disabled,
  .datepicker table tr td.range.today.disabled:hover.disabled,
  .datepicker table tr td.range.today[disabled],
  .datepicker table tr td.range.today:hover[disabled],
  .datepicker table tr td.range.today.disabled[disabled],
  .datepicker table tr td.range.today.disabled:hover[disabled] {
    background-color: #f3e97a;
  }
  .datepicker table tr td.range.today:active,
  .datepicker table tr td.range.today:hover:active,
  .datepicker table tr td.range.today.disabled:active,
  .datepicker table tr td.range.today.disabled:hover:active,
  .datepicker table tr td.range.today.active,
  .datepicker table tr td.range.today:hover.active,
  .datepicker table tr td.range.today.disabled.active,
  .datepicker table tr td.range.today.disabled:hover.active {
    background-color: #efe24b \9;
  }
  .datepicker table tr td.selected,
  .datepicker table tr td.selected:hover,
  .datepicker table tr td.selected.disabled,
  .datepicker table tr td.selected.disabled:hover {
    background-color: #9e9e9e;
    background-image: -moz-linear-gradient(top, #b3b3b3, #808080);
    background-image: -ms-linear-gradient(top, #b3b3b3, #808080);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#b3b3b3), to(#808080));
    background-image: -webkit-linear-gradient(top, #b3b3b3, #808080);
    background-image: -o-linear-gradient(top, #b3b3b3, #808080);
    background-image: linear-gradient(top, #b3b3b3, #808080);
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#b3b3b3', endColorstr='#808080', GradientType=0);
    border-color: #808080 #808080 #595959;
    border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
    filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);
    color: #fff;
    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
  }
  .datepicker table tr td.selected:hover,
  .datepicker table tr td.selected:hover:hover,
  .datepicker table tr td.selected.disabled:hover,
  .datepicker table tr td.selected.disabled:hover:hover,
  .datepicker table tr td.selected:active,
  .datepicker table tr td.selected:hover:active,
  .datepicker table tr td.selected.disabled:active,
  .datepicker table tr td.selected.disabled:hover:active,
  .datepicker table tr td.selected.active,
  .datepicker table tr td.selected:hover.active,
  .datepicker table tr td.selected.disabled.active,
  .datepicker table tr td.selected.disabled:hover.active,
  .datepicker table tr td.selected.disabled,
  .datepicker table tr td.selected:hover.disabled,
  .datepicker table tr td.selected.disabled.disabled,
  .datepicker table tr td.selected.disabled:hover.disabled,
  .datepicker table tr td.selected[disabled],
  .datepicker table tr td.selected:hover[disabled],
  .datepicker table tr td.selected.disabled[disabled],
  .datepicker table tr td.selected.disabled:hover[disabled] {
    background-color: #808080;
  }
  .datepicker table tr td.selected:active,
  .datepicker table tr td.selected:hover:active,
  .datepicker table tr td.selected.disabled:active,
  .datepicker table tr td.selected.disabled:hover:active,
  .datepicker table tr td.selected.active,
  .datepicker table tr td.selected:hover.active,
  .datepicker table tr td.selected.disabled.active,
  .datepicker table tr td.selected.disabled:hover.active {
    background-color: #666666 \9;
  }
  .datepicker table tr td.active,
  .datepicker table tr td.active:hover,
  .datepicker table tr td.active.disabled,
  .datepicker table tr td.active.disabled:hover {
    background-color: #006dcc;
    background-image: -moz-linear-gradient(top, #0088cc, #0044cc);
    background-image: -ms-linear-gradient(top, #0088cc, #0044cc);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#0088cc), to(#0044cc));
    background-image: -webkit-linear-gradient(top, #0088cc, #0044cc);
    background-image: -o-linear-gradient(top, #0088cc, #0044cc);
    background-image: linear-gradient(top, #0088cc, #0044cc);
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#0088cc', endColorstr='#0044cc', GradientType=0);
    border-color: #0044cc #0044cc #002a80;
    border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
    filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);
    color: #fff;
    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
  }
  .datepicker table tr td.active:hover,
  .datepicker table tr td.active:hover:hover,
  .datepicker table tr td.active.disabled:hover,
  .datepicker table tr td.active.disabled:hover:hover,
  .datepicker table tr td.active:active,
  .datepicker table tr td.active:hover:active,
  .datepicker table tr td.active.disabled:active,
  .datepicker table tr td.active.disabled:hover:active,
  .datepicker table tr td.active.active,
  .datepicker table tr td.active:hover.active,
  .datepicker table tr td.active.disabled.active,
  .datepicker table tr td.active.disabled:hover.active,
  .datepicker table tr td.active.disabled,
  .datepicker table tr td.active:hover.disabled,
  .datepicker table tr td.active.disabled.disabled,
  .datepicker table tr td.active.disabled:hover.disabled,
  .datepicker table tr td.active[disabled],
  .datepicker table tr td.active:hover[disabled],
  .datepicker table tr td.active.disabled[disabled],
  .datepicker table tr td.active.disabled:hover[disabled] {
    background-color: #0044cc;
  }
  .datepicker table tr td.active:active,
  .datepicker table tr td.active:hover:active,
  .datepicker table tr td.active.disabled:active,
  .datepicker table tr td.active.disabled:hover:active,
  .datepicker table tr td.active.active,
  .datepicker table tr td.active:hover.active,
  .datepicker table tr td.active.disabled.active,
  .datepicker table tr td.active.disabled:hover.active {
    background-color: #003399 \9;
  }
  .datepicker table tr td span {
    display: block;
    width: 23%;
    height: 54px;
    line-height: 54px;
    float: left;
    margin: 1%;
    cursor: pointer;
    -webkit-border-radius: 4px;
    -moz-border-radius: 4px;
    border-radius: 4px;
  }
  .datepicker table tr td span:hover {
    background: #eeeeee;
  }
  .datepicker table tr td span.disabled,
  .datepicker table tr td span.disabled:hover {
    background: none;
    color: #999999;
    cursor: default;
  }
  .datepicker table tr td span.active,
  .datepicker table tr td span.active:hover,
  .datepicker table tr td span.active.disabled,
  .datepicker table tr td span.active.disabled:hover {
    background-color: #006dcc;
    background-image: -moz-linear-gradient(top, #0088cc, #0044cc);
    background-image: -ms-linear-gradient(top, #0088cc, #0044cc);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#0088cc), to(#0044cc));
    background-image: -webkit-linear-gradient(top, #0088cc, #0044cc);
    background-image: -o-linear-gradient(top, #0088cc, #0044cc);
    background-image: linear-gradient(top, #0088cc, #0044cc);
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#0088cc', endColorstr='#0044cc', GradientType=0);
    border-color: #0044cc #0044cc #002a80;
    border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
    filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);
    color: #fff;
    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
  }
  .datepicker table tr td span.active:hover,
  .datepicker table tr td span.active:hover:hover,
  .datepicker table tr td span.active.disabled:hover,
  .datepicker table tr td span.active.disabled:hover:hover,
  .datepicker table tr td span.active:active,
  .datepicker table tr td span.active:hover:active,
  .datepicker table tr td span.active.disabled:active,
  .datepicker table tr td span.active.disabled:hover:active,
  .datepicker table tr td span.active.active,
  .datepicker table tr td span.active:hover.active,
  .datepicker table tr td span.active.disabled.active,
  .datepicker table tr td span.active.disabled:hover.active,
  .datepicker table tr td span.active.disabled,
  .datepicker table tr td span.active:hover.disabled,
  .datepicker table tr td span.active.disabled.disabled,
  .datepicker table tr td span.active.disabled:hover.disabled,
  .datepicker table tr td span.active[disabled],
  .datepicker table tr td span.active:hover[disabled],
  .datepicker table tr td span.active.disabled[disabled],
  .datepicker table tr td span.active.disabled:hover[disabled] {
    background-color: #0044cc;
  }
  .datepicker table tr td span.active:active,
  .datepicker table tr td span.active:hover:active,
  .datepicker table tr td span.active.disabled:active,
  .datepicker table tr td span.active.disabled:hover:active,
  .datepicker table tr td span.active.active,
  .datepicker table tr td span.active:hover.active,
  .datepicker table tr td span.active.disabled.active,
  .datepicker table tr td span.active.disabled:hover.active {
    background-color: #003399 \9;
  }
  .datepicker table tr td span.old,
  .datepicker table tr td span.new {
    color: #999999;
  }
  .datepicker th.datepicker-switch {
    width: 145px;
  }
  .datepicker thead tr:first-child th,
  .datepicker tfoot tr th {
    cursor: pointer;
  }
  .datepicker thead tr:first-child th:hover,
  .datepicker tfoot tr th:hover {
    background: #eeeeee;
  }
  .datepicker .cw {
    font-size: 10px;
    width: 12px;
    padding: 0 2px 0 5px;
    vertical-align: middle;
  }
  .datepicker thead tr:first-child th.cw {
    cursor: default;
    background-color: transparent;
  }
  .input-append.date .add-on i,
  .input-prepend.date .add-on i {
    cursor: pointer;
    width: 16px;
    height: 16px;
  }
  .input-daterange input {
    text-align: center;
  }
  .input-daterange input:first-child {
    -webkit-border-radius: 3px 0 0 3px;
    -moz-border-radius: 3px 0 0 3px;
    border-radius: 3px 0 0 3px;
  }
  .input-daterange input:last-child {
    -webkit-border-radius: 0 3px 3px 0;
    -moz-border-radius: 0 3px 3px 0;
    border-radius: 0 3px 3px 0;
  }
  .input-daterange .add-on {
    display: inline-block;
    width: auto;
    min-width: 16px;
    height: 20px;
    padding: 4px 5px;
    font-weight: normal;
    line-height: 20px;
    text-align: center;
    text-shadow: 0 1px 0 #ffffff;
    vertical-align: middle;
    background-color: #eeeeee;
    border: 1px solid #ccc;
    margin-left: -5px;
    margin-right: -5px;
  }
  .datepicker.dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 1000;
    float: left;
    display: none;
    min-width: 160px;
    list-style: none;
    background-color: #ffffff;
    border: 1px solid #ccc;
    border: 1px solid rgba(0, 0, 0, 0.2);
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    border-radius: 5px;
    -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
    -moz-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
    -webkit-background-clip: padding-box;
    -moz-background-clip: padding;
    background-clip: padding-box;
    *border-right-width: 2px;
    *border-bottom-width: 2px;
    color: #333333;
    font-size: 13px;
    line-height: 20px;
  }
  .datepicker.dropdown-menu th,
  .datepicker.datepicker-inline th,
  .datepicker.dropdown-menu td,
  .datepicker.datepicker-inline td {
    padding: 4px 5px;
  }
</style>

<%# ##################### bootstrap-datepicker.js ##################### %>
<script>
  (function(factory){
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory);
    } else if (typeof exports === 'object') {
        factory(require('jquery'));
    } else {
        factory(jQuery);
    }
  }(function($, undefined){

  function UTCDate(){
    return new Date(Date.UTC.apply(Date, arguments));
  }
  function UTCToday(){
    var today = new Date();
    return UTCDate(today.getFullYear(), today.getMonth(), today.getDate());
  }
  function isUTCEquals(date1, date2) {
    return (
      date1.getUTCFullYear() === date2.getUTCFullYear() &&
      date1.getUTCMonth() === date2.getUTCMonth() &&
      date1.getUTCDate() === date2.getUTCDate()
    );
  }
  function alias(method){
    return function(){
      return this[method].apply(this, arguments);
    };
  }
  function isValidDate(d) {
    return d && !isNaN(d.getTime());
  }

  var DateArray = (function(){
    var extras = {
      get: function(i){
        return this.slice(i)[0];
      },
      contains: function(d){
        // Array.indexOf is not cross-browser;
        // $.inArray doesn't work with Dates
        var val = d && d.valueOf();
        for (var i=0, l=this.length; i < l; i++)
          if (this[i].valueOf() === val)
            return i;
        return -1;
      },
      remove: function(i){
        this.splice(i,1);
      },
      replace: function(new_array){
        if (!new_array)
          return;
        if (!$.isArray(new_array))
          new_array = [new_array];
        this.clear();
        this.push.apply(this, new_array);
      },
      clear: function(){
        this.length = 0;
      },
      copy: function(){
        var a = new DateArray();
        a.replace(this);
        return a;
      }
    };

    return function(){
      var a = [];
      a.push.apply(a, arguments);
      $.extend(a, extras);
      return a;
    };
  })();


  // Picker object

  var Datepicker = function(element, options){
    $(element).data('datepicker', this);
    this._process_options(options);

    this.dates = new DateArray();
    this.viewDate = this.o.defaultViewDate;
    this.focusDate = null;

    this.element = $(element);
    this.isInput = this.element.is('input');
    this.inputField = this.isInput ? this.element : this.element.find('input');
    this.component = this.element.hasClass('date') ? this.element.find('.add-on, .input-group-addon, .btn') : false;
    this.hasInput = this.component && this.inputField.length;
    if (this.component && this.component.length === 0)
      this.component = false;
    this.isInline = !this.component && this.element.is('div');

    this.picker = $(DPGlobal.template);

    // Checking templates and inserting
    if (this._check_template(this.o.templates.leftArrow)) {
      this.picker.find('.prev').html(this.o.templates.leftArrow);
    }
    if (this._check_template(this.o.templates.rightArrow)) {
      this.picker.find('.next').html(this.o.templates.rightArrow);
    }

    this._buildEvents();
    this._attachEvents();

    if (this.isInline){
      this.picker.addClass('datepicker-inline').appendTo(this.element);
    }
    else {
      this.picker.addClass('datepicker-dropdown dropdown-menu');
    }

    if (this.o.rtl){
      this.picker.addClass('datepicker-rtl');
    }

    this.viewMode = this.o.startView;

    if (this.o.calendarWeeks)
      this.picker.find('thead .datepicker-title, tfoot .today, tfoot .clear')
            .attr('colspan', function(i, val){
              return parseInt(val) + 1;
            });

    this._allow_update = false;

    this.setStartDate(this._o.startDate);
    this.setEndDate(this._o.endDate);
    this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);
    this.setDaysOfWeekHighlighted(this.o.daysOfWeekHighlighted);
    this.setDatesDisabled(this.o.datesDisabled);

    this.fillDow();
    this.fillMonths();

    this._allow_update = true;

    this.update();
    this.showMode();

    if (this.isInline){
      this.show();
    }
  };

  Datepicker.prototype = {
    constructor: Datepicker,

    _resolveViewName: function(view, default_value){
      if (view === 0 || view === 'days' || view === 'month') {
        return 0;
      }
      if (view === 1 || view === 'months' || view === 'year') {
        return 1;
      }
      if (view === 2 || view === 'years' || view === 'decade') {
        return 2;
      }
      if (view === 3 || view === 'decades' || view === 'century') {
        return 3;
      }
      if (view === 4 || view === 'centuries' || view === 'millennium') {
        return 4;
      }
      return default_value === undefined ? false : default_value;
    },

    _check_template: function(tmp){
      try {
        // If empty
        if (tmp === undefined || tmp === "") {
          return false;
        }
        // If no html, everything ok
        if ((tmp.match(/[<>]/g) || []).length <= 0) {
          return true;
        }
        // Checking if html is fine
        var jDom = $(tmp);
        return jDom.length > 0;
      }
      catch (ex) {
        return false;
      }
    },

    _process_options: function(opts){
      // Store raw options for reference
      this._o = $.extend({}, this._o, opts);
      // Processed options
      var o = this.o = $.extend({}, this._o);

      // Check if "de-DE" style date is available, if not language should
      // fallback to 2 letter code eg "de"
      var lang = o.language;
      if (!dates[lang]){
        lang = lang.split('-')[0];
        if (!dates[lang])
          lang = defaults.language;
      }
      o.language = lang;

      // Retrieve view index from any aliases
      o.startView = this._resolveViewName(o.startView, 0);
      o.minViewMode = this._resolveViewName(o.minViewMode, 0);
      o.maxViewMode = this._resolveViewName(o.maxViewMode, 4);

      // Check that the start view is between min and max
      o.startView = Math.min(o.startView, o.maxViewMode);
      o.startView = Math.max(o.startView, o.minViewMode);

      // true, false, or Number > 0
      if (o.multidate !== true){
        o.multidate = Number(o.multidate) || false;
        if (o.multidate !== false)
          o.multidate = Math.max(0, o.multidate);
      }
      o.multidateSeparator = String(o.multidateSeparator);

      o.weekStart %= 7;
      o.weekEnd = (o.weekStart + 6) % 7;

      var format = DPGlobal.parseFormat(o.format);
      if (o.startDate !== -Infinity){
        if (!!o.startDate){
          if (o.startDate instanceof Date)
            o.startDate = this._local_to_utc(this._zero_time(o.startDate));
          else
            o.startDate = DPGlobal.parseDate(o.startDate, format, o.language, o.assumeNearbyYear);
        }
        else {
          o.startDate = -Infinity;
        }
      }
      if (o.endDate !== Infinity){
        if (!!o.endDate){
          if (o.endDate instanceof Date)
            o.endDate = this._local_to_utc(this._zero_time(o.endDate));
          else
            o.endDate = DPGlobal.parseDate(o.endDate, format, o.language, o.assumeNearbyYear);
        }
        else {
          o.endDate = Infinity;
        }
      }

      o.daysOfWeekDisabled = o.daysOfWeekDisabled||[];
      if (!$.isArray(o.daysOfWeekDisabled))
        o.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\s]*/);
      o.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function(d){
        return parseInt(d, 10);
      });

      o.daysOfWeekHighlighted = o.daysOfWeekHighlighted||[];
      if (!$.isArray(o.daysOfWeekHighlighted))
        o.daysOfWeekHighlighted = o.daysOfWeekHighlighted.split(/[,\s]*/);
      o.daysOfWeekHighlighted = $.map(o.daysOfWeekHighlighted, function(d){
        return parseInt(d, 10);
      });

      o.datesDisabled = o.datesDisabled||[];
      if (!$.isArray(o.datesDisabled)) {
        o.datesDisabled = [
          o.datesDisabled
        ];
      }
      o.datesDisabled = $.map(o.datesDisabled,function(d){
        return DPGlobal.parseDate(d, format, o.language, o.assumeNearbyYear);
      });

      var plc = String(o.orientation).toLowerCase().split(/\s+/g),
        _plc = o.orientation.toLowerCase();
      plc = $.grep(plc, function(word){
        return /^auto|left|right|top|bottom$/.test(word);
      });
      o.orientation = {x: 'auto', y: 'auto'};
      if (!_plc || _plc === 'auto')
        ; // no action
      else if (plc.length === 1){
        switch (plc[0]){
          case 'top':
          case 'bottom':
            o.orientation.y = plc[0];
            break;
          case 'left':
          case 'right':
            o.orientation.x = plc[0];
            break;
        }
      }
      else {
        _plc = $.grep(plc, function(word){
          return /^left|right$/.test(word);
        });
        o.orientation.x = _plc[0] || 'auto';

        _plc = $.grep(plc, function(word){
          return /^top|bottom$/.test(word);
        });
        o.orientation.y = _plc[0] || 'auto';
      }
      if (o.defaultViewDate) {
        var year = o.defaultViewDate.year || new Date().getFullYear();
        var month = o.defaultViewDate.month || 0;
        var day = o.defaultViewDate.day || 1;
        o.defaultViewDate = UTCDate(year, month, day);
      } else {
        o.defaultViewDate = UTCToday();
      }
    },
    _events: [],
    _secondaryEvents: [],
    _applyEvents: function(evs){
      for (var i=0, el, ch, ev; i < evs.length; i++){
        el = evs[i][0];
        if (evs[i].length === 2){
          ch = undefined;
          ev = evs[i][1];
        }
        else if (evs[i].length === 3){
          ch = evs[i][1];
          ev = evs[i][2];
        }
        el.on(ev, ch);
      }
    },
    _unapplyEvents: function(evs){
      for (var i=0, el, ev, ch; i < evs.length; i++){
        el = evs[i][0];
        if (evs[i].length === 2){
          ch = undefined;
          ev = evs[i][1];
        }
        else if (evs[i].length === 3){
          ch = evs[i][1];
          ev = evs[i][2];
        }
        el.off(ev, ch);
      }
    },
    _buildEvents: function(){
            var events = {
                keyup: $.proxy(function(e){
                    if ($.inArray(e.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) === -1)
                        this.update();
                }, this),
                keydown: $.proxy(this.keydown, this),
                paste: $.proxy(this.paste, this)
            };

            if (this.o.showOnFocus === true) {
                events.focus = $.proxy(this.show, this);
            }

            if (this.isInput) { // single input
                this._events = [
                    [this.element, events]
                ];
            }
            else if (this.component && this.hasInput) { // component: input + button
                this._events = [
                    // For components that are not readonly, allow keyboard nav
                    [this.inputField, events],
                    [this.component, {
                        click: $.proxy(this.show, this)
                    }]
                ];
            }
      else {
        this._events = [
          [this.element, {
            click: $.proxy(this.show, this),
            keydown: $.proxy(this.keydown, this)
          }]
        ];
      }
      this._events.push(
        // Component: listen for blur on element descendants
        [this.element, '*', {
          blur: $.proxy(function(e){
            this._focused_from = e.target;
          }, this)
        }],
        // Input: listen for blur on element
        [this.element, {
          blur: $.proxy(function(e){
            this._focused_from = e.target;
          }, this)
        }]
      );

      if (this.o.immediateUpdates) {
        // Trigger input updates immediately on changed year/month
        this._events.push([this.element, {
          'changeYear changeMonth': $.proxy(function(e){
            this.update(e.date);
          }, this)
        }]);
      }

      this._secondaryEvents = [
        [this.picker, {
          click: $.proxy(this.click, this)
        }],
        [$(window), {
          resize: $.proxy(this.place, this)
        }],
        [$(document), {
          mousedown: $.proxy(function(e){
            // Clicked outside the datepicker, hide it
            if (!(
              this.element.is(e.target) ||
              this.element.find(e.target).length ||
              this.picker.is(e.target) ||
              this.picker.find(e.target).length ||
              this.isInline
            )){
              this.hide();
            }
          }, this)
        }]
      ];
    },
    _attachEvents: function(){
      this._detachEvents();
      this._applyEvents(this._events);
    },
    _detachEvents: function(){
      this._unapplyEvents(this._events);
    },
    _attachSecondaryEvents: function(){
      this._detachSecondaryEvents();
      this._applyEvents(this._secondaryEvents);
    },
    _detachSecondaryEvents: function(){
      this._unapplyEvents(this._secondaryEvents);
    },
    _trigger: function(event, altdate){
      var date = altdate || this.dates.get(-1),
        local_date = this._utc_to_local(date);

      this.element.trigger({
        type: event,
        date: local_date,
        dates: $.map(this.dates, this._utc_to_local),
        format: $.proxy(function(ix, format){
          if (arguments.length === 0){
            ix = this.dates.length - 1;
            format = this.o.format;
          }
          else if (typeof ix === 'string'){
            format = ix;
            ix = this.dates.length - 1;
          }
          format = format || this.o.format;
          var date = this.dates.get(ix);
          return DPGlobal.formatDate(date, format, this.o.language);
        }, this)
      });
    },

    show: function(){
      if (this.inputField.prop('disabled') || (this.inputField.prop('readonly') && this.o.enableOnReadonly === false))
        return;
      if (!this.isInline)
        this.picker.appendTo(this.o.container);
      this.place();
      this.picker.show();
      this._attachSecondaryEvents();
      this._trigger('show');
      if ((window.navigator.msMaxTouchPoints || 'ontouchstart' in document) && this.o.disableTouchKeyboard) {
        $(this.element).blur();
      }
      return this;
    },

    hide: function(){
      if (this.isInline || !this.picker.is(':visible'))
        return this;
      this.focusDate = null;
      this.picker.hide().detach();
      this._detachSecondaryEvents();
      this.viewMode = this.o.startView;
      this.showMode();

      if (this.o.forceParse && this.inputField.val())
        this.setValue();
      this._trigger('hide');
      return this;
    },

    destroy: function(){
      this.hide();
      this._detachEvents();
      this._detachSecondaryEvents();
      this.picker.remove();
      delete this.element.data().datepicker;
      if (!this.isInput){
        delete this.element.data().date;
      }
      return this;
    },

    paste: function(evt){
      var dateString;
      if (evt.originalEvent.clipboardData && evt.originalEvent.clipboardData.types
        && $.inArray('text/plain', evt.originalEvent.clipboardData.types) !== -1) {
        dateString = evt.originalEvent.clipboardData.getData('text/plain');
      }
      else if (window.clipboardData) {
        dateString = window.clipboardData.getData('Text');
      }
      else {
        return;
      }
      this.setDate(dateString);
      this.update();
      evt.preventDefault();
    },

    _utc_to_local: function(utc){
      return utc && new Date(utc.getTime() + (utc.getTimezoneOffset()*60000));
    },
    _local_to_utc: function(local){
      return local && new Date(local.getTime() - (local.getTimezoneOffset()*60000));
    },
    _zero_time: function(local){
      return local && new Date(local.getFullYear(), local.getMonth(), local.getDate());
    },
    _zero_utc_time: function(utc){
      return utc && new Date(Date.UTC(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate()));
    },

    getDates: function(){
      return $.map(this.dates, this._utc_to_local);
    },

    getUTCDates: function(){
      return $.map(this.dates, function(d){
        return new Date(d);
      });
    },

    getDate: function(){
      return this._utc_to_local(this.getUTCDate());
    },

    getUTCDate: function(){
      var selected_date = this.dates.get(-1);
      if (typeof selected_date !== 'undefined') {
        return new Date(selected_date);
      } else {
        return null;
      }
    },

    clearDates: function(){
      if (this.inputField) {
        this.inputField.val('');
      }

      this.update();
      this._trigger('changeDate');

      if (this.o.autoclose) {
        this.hide();
      }
    },
    setDates: function(){
      var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
      this.update.apply(this, args);
      this._trigger('changeDate');
      this.setValue();
      return this;
    },

    setUTCDates: function(){
      var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
      this.update.apply(this, $.map(args, this._utc_to_local));
      this._trigger('changeDate');
      this.setValue();
      return this;
    },

    setDate: alias('setDates'),
    setUTCDate: alias('setUTCDates'),
    remove: alias('destroy'),

    setValue: function(){
      var formatted = this.getFormattedDate();
      this.inputField.val(formatted);
      return this;
    },

    getFormattedDate: function(format){
      if (format === undefined)
        format = this.o.format;

      var lang = this.o.language;
      return $.map(this.dates, function(d){
        return DPGlobal.formatDate(d, format, lang);
      }).join(this.o.multidateSeparator);
    },

    getStartDate: function(){
      return this.o.startDate;
    },

    setStartDate: function(startDate){
      this._process_options({startDate: startDate});
      this.update();
      this.updateNavArrows();
      return this;
    },

    getEndDate: function(){
      return this.o.endDate;
    },

    setEndDate: function(endDate){
      this._process_options({endDate: endDate});
      this.update();
      this.updateNavArrows();
      return this;
    },

    setDaysOfWeekDisabled: function(daysOfWeekDisabled){
      this._process_options({daysOfWeekDisabled: daysOfWeekDisabled});
      this.update();
      this.updateNavArrows();
      return this;
    },

    setDaysOfWeekHighlighted: function(daysOfWeekHighlighted){
      this._process_options({daysOfWeekHighlighted: daysOfWeekHighlighted});
      this.update();
      return this;
    },

    setDatesDisabled: function(datesDisabled){
      this._process_options({datesDisabled: datesDisabled});
      this.update();
      this.updateNavArrows();
    },

    place: function(){
      if (this.isInline)
        return this;
      var calendarWidth = this.picker.outerWidth(),
        calendarHeight = this.picker.outerHeight(),
        visualPadding = 10,
        container = $(this.o.container),
        windowWidth = container.width(),
        scrollTop = this.o.container === 'body' ? $(document).scrollTop() : container.scrollTop(),
        appendOffset = container.offset();

      var parentsZindex = [];
      this.element.parents().each(function(){
        var itemZIndex = $(this).css('z-index');
        if (itemZIndex !== 'auto' && itemZIndex !== 0) parentsZindex.push(parseInt(itemZIndex));
      });
      var zIndex = Math.max.apply(Math, parentsZindex) + this.o.zIndexOffset;
      var offset = this.component ? this.component.parent().offset() : this.element.offset();
      var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);
      var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);
      var left = offset.left - appendOffset.left,
        top = offset.top - appendOffset.top;

      if (this.o.container !== 'body') {
        top += scrollTop;
      }

      this.picker.removeClass(
        'datepicker-orient-top datepicker-orient-bottom '+
        'datepicker-orient-right datepicker-orient-left'
      );

      if (this.o.orientation.x !== 'auto'){
        this.picker.addClass('datepicker-orient-' + this.o.orientation.x);
        if (this.o.orientation.x === 'right')
          left -= calendarWidth - width;
      }
      // auto x orientation is best-placement: if it crosses a window
      // edge, fudge it sideways
      else {
        if (offset.left < 0) {
          // component is outside the window on the left side. Move it into visible range
          this.picker.addClass('datepicker-orient-left');
          left -= offset.left - visualPadding;
        } else if (left + calendarWidth > windowWidth) {
          // the calendar passes the widow right edge. Align it to component right side
          this.picker.addClass('datepicker-orient-right');
          left += width - calendarWidth;
        } else {
          // Default to left
          this.picker.addClass('datepicker-orient-left');
        }
      }

      // auto y orientation is best-situation: top or bottom, no fudging,
      // decision based on which shows more of the calendar
      var yorient = this.o.orientation.y,
        top_overflow;
      if (yorient === 'auto'){
        top_overflow = -scrollTop + top - calendarHeight;
        yorient = top_overflow < 0 ? 'bottom' : 'top';
      }

      this.picker.addClass('datepicker-orient-' + yorient);
      if (yorient === 'top')
        top -= calendarHeight + parseInt(this.picker.css('padding-top'));
      else
        top += height;

      if (this.o.rtl) {
        var right = windowWidth - (left + width);
        this.picker.css({
          top: top,
          right: right,
          zIndex: zIndex
        });
      } else {
        this.picker.css({
          top: top,
          left: left,
          zIndex: zIndex
        });
      }
      return this;
    },

    _allow_update: true,
    update: function(){
      if (!this._allow_update)
        return this;

      var oldDates = this.dates.copy(),
        dates = [],
        fromArgs = false;
      if (arguments.length){
        $.each(arguments, $.proxy(function(i, date){
          if (date instanceof Date)
            date = this._local_to_utc(date);
          dates.push(date);
        }, this));
        fromArgs = true;
      }
      else {
        dates = this.isInput
            ? this.element.val()
            : this.element.data('date') || this.inputField.val();
        if (dates && this.o.multidate)
          dates = dates.split(this.o.multidateSeparator);
        else
          dates = [dates];
        delete this.element.data().date;
      }

      dates = $.map(dates, $.proxy(function(date){
        return DPGlobal.parseDate(date, this.o.format, this.o.language, this.o.assumeNearbyYear);
      }, this));
      dates = $.grep(dates, $.proxy(function(date){
        return (
          !this.dateWithinRange(date) ||
          !date
        );
      }, this), true);
      this.dates.replace(dates);

      if (this.dates.length)
        this.viewDate = new Date(this.dates.get(-1));
      else if (this.viewDate < this.o.startDate)
        this.viewDate = new Date(this.o.startDate);
      else if (this.viewDate > this.o.endDate)
        this.viewDate = new Date(this.o.endDate);
      else
        this.viewDate = this.o.defaultViewDate;

      if (fromArgs){
        // setting date by clicking
        this.setValue();
      }
      else if (dates.length){
        // setting date by typing
        if (String(oldDates) !== String(this.dates))
          this._trigger('changeDate');
      }
      if (!this.dates.length && oldDates.length)
        this._trigger('clearDate');

      this.fill();
      this.element.change();
      return this;
    },

    fillDow: function(){
      var dowCnt = this.o.weekStart,
        html = '<tr>';
      if (this.o.calendarWeeks){
        this.picker.find('.datepicker-days .datepicker-switch')
          .attr('colspan', function(i, val){
            return parseInt(val) + 1;
          });
        html += '<th class="cw">&#160;</th>';
      }
      while (dowCnt < this.o.weekStart + 7){
        html += '<th class="dow';
        if ($.inArray(dowCnt, this.o.daysOfWeekDisabled) > -1)
          html += ' disabled';
        html += '">'+dates[this.o.language].daysMin[(dowCnt++)%7]+'</th>';
      }
      html += '</tr>';
      this.picker.find('.datepicker-days thead').append(html);
    },

    fillMonths: function(){
      var localDate = this._utc_to_local(this.viewDate);
      var html = '',
      i = 0;
      while (i < 12){
        var focused = localDate && localDate.getMonth() === i ? ' focused' : '';
        html += '<span class="month' + focused + '">' + dates[this.o.language].monthsShort[i++]+'</span>';
      }
      this.picker.find('.datepicker-months td').html(html);
    },

    setRange: function(range){
      if (!range || !range.length)
        delete this.range;
      else
        this.range = $.map(range, function(d){
          return d.valueOf();
        });
      this.fill();
    },

    getClassNames: function(date){
      var cls = [],
        year = this.viewDate.getUTCFullYear(),
        month = this.viewDate.getUTCMonth(),
        today = new Date();
      if (date.getUTCFullYear() < year || (date.getUTCFullYear() === year && date.getUTCMonth() < month)){
        cls.push('old');
      }
      else if (date.getUTCFullYear() > year || (date.getUTCFullYear() === year && date.getUTCMonth() > month)){
        cls.push('new');
      }
      if (this.focusDate && date.valueOf() === this.focusDate.valueOf())
        cls.push('focused');
      // Compare internal UTC date with local today, not UTC today
      if (this.o.todayHighlight &&
        date.getUTCFullYear() === today.getFullYear() &&
        date.getUTCMonth() === today.getMonth() &&
        date.getUTCDate() === today.getDate()){
        cls.push('today');
      }
      if (this.dates.contains(date) !== -1)
        cls.push('active');
      if (!this.dateWithinRange(date)){
        cls.push('disabled');
      }
      if (this.dateIsDisabled(date)){
        cls.push('disabled', 'disabled-date');	
      } 
      if ($.inArray(date.getUTCDay(), this.o.daysOfWeekHighlighted) !== -1){
        cls.push('highlighted');
      }

      if (this.range){
        if (date > this.range[0] && date < this.range[this.range.length-1]){
          cls.push('range');
        }
        if ($.inArray(date.valueOf(), this.range) !== -1){
          cls.push('selected');
        }
        if (date.valueOf() === this.range[0]){
          cls.push('range-start');
        }
        if (date.valueOf() === this.range[this.range.length-1]){
          cls.push('range-end');
        }
      }
      return cls;
    },

    _fill_yearsView: function(selector, cssClass, factor, step, currentYear, startYear, endYear, callback){
      var html, view, year, steps, startStep, endStep, thisYear, i, classes, tooltip, before;

      html      = '';
      view      = this.picker.find(selector);
      year      = parseInt(currentYear / factor, 10) * factor;
      startStep = parseInt(startYear / step, 10) * step;
      endStep   = parseInt(endYear / step, 10) * step;
      steps     = $.map(this.dates, function(d){
        return parseInt(d.getUTCFullYear() / step, 10) * step;
      });

      view.find('.datepicker-switch').text(year + '-' + (year + step * 9));

      thisYear = year - step;
      for (i = -1; i < 11; i += 1) {
        classes = [cssClass];
        tooltip = null;

        if (i === -1) {
          classes.push('old');
        } else if (i === 10) {
          classes.push('new');
        }
        if ($.inArray(thisYear, steps) !== -1) {
          classes.push('active');
        }
        if (thisYear < startStep || thisYear > endStep) {
          classes.push('disabled');
        }
        if (thisYear === this.viewDate.getFullYear()) {
          classes.push('focused');
        }

        if (callback !== $.noop) {
          before = callback(new Date(thisYear, 0, 1));
          if (before === undefined) {
            before = {};
          } else if (typeof(before) === 'boolean') {
            before = {enabled: before};
          } else if (typeof(before) === 'string') {
            before = {classes: before};
          }
          if (before.enabled === false) {
            classes.push('disabled');
          }
          if (before.classes) {
            classes = classes.concat(before.classes.split(/\s+/));
          }
          if (before.tooltip) {
            tooltip = before.tooltip;
          }
        }

        html += '<span class="' + classes.join(' ') + '"' + (tooltip ? ' title="' + tooltip + '"' : '') + '>' + thisYear + '</span>';
        thisYear += step;
      }
      view.find('td').html(html);
    },

    fill: function(){
      var d = new Date(this.viewDate),
        year = d.getUTCFullYear(),
        month = d.getUTCMonth(),
        startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,
        startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,
        endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,
        endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,
        todaytxt = dates[this.o.language].today || dates['en'].today || '',
        cleartxt = dates[this.o.language].clear || dates['en'].clear || '',
        titleFormat = dates[this.o.language].titleFormat || dates['en'].titleFormat,
        tooltip,
        before;
      if (isNaN(year) || isNaN(month))
        return;
      this.picker.find('.datepicker-days .datepicker-switch')
            .text(DPGlobal.formatDate(d, titleFormat, this.o.language));
      this.picker.find('tfoot .today')
            .text(todaytxt)
            .toggle(this.o.todayBtn !== false);
      this.picker.find('tfoot .clear')
            .text(cleartxt)
            .toggle(this.o.clearBtn !== false);
      this.picker.find('thead .datepicker-title')
            .text(this.o.title)
            .toggle(this.o.title !== '');
      this.updateNavArrows();
      this.fillMonths();
      var prevMonth = UTCDate(year, month-1, 28),
        day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
      prevMonth.setUTCDate(day);
      prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7)%7);
      var nextMonth = new Date(prevMonth);
      if (prevMonth.getUTCFullYear() < 100){
        nextMonth.setUTCFullYear(prevMonth.getUTCFullYear());
      }
      nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
      nextMonth = nextMonth.valueOf();
      var html = [];
      var clsName;
      while (prevMonth.valueOf() < nextMonth){
        if (prevMonth.getUTCDay() === this.o.weekStart){
          html.push('<tr>');
          if (this.o.calendarWeeks){
            // ISO 8601: First week contains first thursday.
            // ISO also states week starts on Monday, but we can be more abstract here.
            var
              // Start of current week: based on weekstart/current date
              ws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),
              // Thursday of this week
              th = new Date(Number(ws) + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),
              // First Thursday of year, year from thursday
              yth = new Date(Number(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay())%7*864e5),
              // Calendar week: ms between thursdays, div ms per day, div 7 days
              calWeek =  (th - yth) / 864e5 / 7 + 1;
            html.push('<td class="cw">'+ calWeek +'</td>');
          }
        }
        clsName = this.getClassNames(prevMonth);
        clsName.push('day');

        if (this.o.beforeShowDay !== $.noop){
          before = this.o.beforeShowDay(this._utc_to_local(prevMonth));
          if (before === undefined)
            before = {};
          else if (typeof(before) === 'boolean')
            before = {enabled: before};
          else if (typeof(before) === 'string')
            before = {classes: before};
          if (before.enabled === false)
            clsName.push('disabled');
          if (before.classes)
            clsName = clsName.concat(before.classes.split(/\s+/));
          if (before.tooltip)
            tooltip = before.tooltip;
        }

        //Check if uniqueSort exists (supported by jquery >=1.12 and >=2.2)
        //Fallback to unique function for older jquery versions
        if ($.isFunction($.uniqueSort)) {
          clsName = $.uniqueSort(clsName);
        } else {
          clsName = $.unique(clsName);
        }

        html.push('<td class="'+clsName.join(' ')+'"' + (tooltip ? ' title="'+tooltip+'"' : '') + '>'+prevMonth.getUTCDate() + '</td>');
        tooltip = null;
        if (prevMonth.getUTCDay() === this.o.weekEnd){
          html.push('</tr>');
        }
        prevMonth.setUTCDate(prevMonth.getUTCDate()+1);
      }
      this.picker.find('.datepicker-days tbody').empty().append(html.join(''));

      var monthsTitle = dates[this.o.language].monthsTitle || dates['en'].monthsTitle || 'Months';
      var months = this.picker.find('.datepicker-months')
            .find('.datepicker-switch')
              .text(this.o.maxViewMode < 2 ? monthsTitle : year)
              .end()
            .find('span').removeClass('active');

      $.each(this.dates, function(i, d){
        if (d.getUTCFullYear() === year)
          months.eq(d.getUTCMonth()).addClass('active');
      });

      if (year < startYear || year > endYear){
        months.addClass('disabled');
      }
      if (year === startYear){
        months.slice(0, startMonth).addClass('disabled');
      }
      if (year === endYear){
        months.slice(endMonth+1).addClass('disabled');
      }

      if (this.o.beforeShowMonth !== $.noop){
        var that = this;
        $.each(months, function(i, month){
          var moDate = new Date(year, i, 1);
          var before = that.o.beforeShowMonth(moDate);
          if (before === undefined)
            before = {};
          else if (typeof(before) === 'boolean')
            before = {enabled: before};
          else if (typeof(before) === 'string')
            before = {classes: before};
          if (before.enabled === false && !$(month).hasClass('disabled'))
              $(month).addClass('disabled');
          if (before.classes)
              $(month).addClass(before.classes);
          if (before.tooltip)
              $(month).prop('title', before.tooltip);
        });
      }

      // Generating decade/years picker
      this._fill_yearsView(
        '.datepicker-years',
        'year',
        10,
        1,
        year,
        startYear,
        endYear,
        this.o.beforeShowYear
      );

      // Generating century/decades picker
      this._fill_yearsView(
        '.datepicker-decades',
        'decade',
        100,
        10,
        year,
        startYear,
        endYear,
        this.o.beforeShowDecade
      );

      // Generating millennium/centuries picker
      this._fill_yearsView(
        '.datepicker-centuries',
        'century',
        1000,
        100,
        year,
        startYear,
        endYear,
        this.o.beforeShowCentury
      );
    },

    updateNavArrows: function(){
      if (!this._allow_update)
        return;

      var d = new Date(this.viewDate),
        year = d.getUTCFullYear(),
        month = d.getUTCMonth();
      switch (this.viewMode){
        case 0:
          if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()){
            this.picker.find('.prev').css({visibility: 'hidden'});
          }
          else {
            this.picker.find('.prev').css({visibility: 'visible'});
          }
          if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()){
            this.picker.find('.next').css({visibility: 'hidden'});
          }
          else {
            this.picker.find('.next').css({visibility: 'visible'});
          }
          break;
        case 1:
        case 2:
        case 3:
        case 4:
          if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() || this.o.maxViewMode < 2){
            this.picker.find('.prev').css({visibility: 'hidden'});
          }
          else {
            this.picker.find('.prev').css({visibility: 'visible'});
          }
          if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() || this.o.maxViewMode < 2){
            this.picker.find('.next').css({visibility: 'hidden'});
          }
          else {
            this.picker.find('.next').css({visibility: 'visible'});
          }
          break;
      }
    },

    click: function(e){
      e.preventDefault();
      e.stopPropagation();

      var target, dir, day, year, month, monthChanged, yearChanged;
      target = $(e.target);

      // Clicked on the switch
      if (target.hasClass('datepicker-switch')){
        this.showMode(1);
      }

      // Clicked on prev or next
      var navArrow = target.closest('.prev, .next');
      if (navArrow.length > 0) {
        dir = DPGlobal.modes[this.viewMode].navStep * (navArrow.hasClass('prev') ? -1 : 1);
        if (this.viewMode === 0){
          this.viewDate = this.moveMonth(this.viewDate, dir);
          this._trigger('changeMonth', this.viewDate);
        } else {
          this.viewDate = this.moveYear(this.viewDate, dir);
          if (this.viewMode === 1){
            this._trigger('changeYear', this.viewDate);
          }
        }
        this.fill();
      }

      // Clicked on today button
      if (target.hasClass('today') && !target.hasClass('day')){
        this.showMode(-2);
        this._setDate(UTCToday(), this.o.todayBtn === 'linked' ? null : 'view');
      }

      // Clicked on clear button
      if (target.hasClass('clear')){
        this.clearDates();
      }

      if (!target.hasClass('disabled')){
        // Clicked on a day
        if (target.hasClass('day')){
          day = parseInt(target.text(), 10) || 1;
          year = this.viewDate.getUTCFullYear();
          month = this.viewDate.getUTCMonth();

          // From last month
          if (target.hasClass('old')){
            if (month === 0) {
              month = 11;
              year = year - 1;
              monthChanged = true;
              yearChanged = true;
            } else {
              month = month - 1;
              monthChanged = true;
            }
          }

          // From next month
          if (target.hasClass('new')) {
            if (month === 11){
              month = 0;
              year = year + 1;
              monthChanged = true;
              yearChanged = true;
            } else {
              month = month + 1;
              monthChanged = true;
            }
          }
          this._setDate(UTCDate(year, month, day));
          if (yearChanged) {
            this._trigger('changeYear', this.viewDate);
          }
          if (monthChanged) {
            this._trigger('changeMonth', this.viewDate);
          }
        }

        // Clicked on a month
        if (target.hasClass('month')) {
          this.viewDate.setUTCDate(1);
          day = 1;
          month = target.parent().find('span').index(target);
          year = this.viewDate.getUTCFullYear();
          this.viewDate.setUTCMonth(month);
          this._trigger('changeMonth', this.viewDate);
          if (this.o.minViewMode === 1){
            this._setDate(UTCDate(year, month, day));
            this.showMode();
          } else {
            this.showMode(-1);
          }
          this.fill();
        }

        // Clicked on a year
        if (target.hasClass('year')
            || target.hasClass('decade')
            || target.hasClass('century')) {
          this.viewDate.setUTCDate(1);

          day = 1;
          month = 0;
          year = parseInt(target.text(), 10)||0;
          this.viewDate.setUTCFullYear(year);

          if (target.hasClass('year')){
            this._trigger('changeYear', this.viewDate);
            if (this.o.minViewMode === 2){
              this._setDate(UTCDate(year, month, day));
            }
          }
          if (target.hasClass('decade')){
            this._trigger('changeDecade', this.viewDate);
            if (this.o.minViewMode === 3){
              this._setDate(UTCDate(year, month, day));
            }
          }
          if (target.hasClass('century')){
            this._trigger('changeCentury', this.viewDate);
            if (this.o.minViewMode === 4){
              this._setDate(UTCDate(year, month, day));
            }
          }

          this.showMode(-1);
          this.fill();
        }
      }

      if (this.picker.is(':visible') && this._focused_from){
        $(this._focused_from).focus();
      }
      delete this._focused_from;
    },

    _toggle_multidate: function(date){
      var ix = this.dates.contains(date);
      if (!date){
        this.dates.clear();
      }

      if (ix !== -1){
        if (this.o.multidate === true || this.o.multidate > 1 || this.o.toggleActive){
          this.dates.remove(ix);
        }
      } else if (this.o.multidate === false) {
        this.dates.clear();
        this.dates.push(date);
      }
      else {
        this.dates.push(date);
      }

      if (typeof this.o.multidate === 'number')
        while (this.dates.length > this.o.multidate)
          this.dates.remove(0);
    },

    _setDate: function(date, which){
      if (!which || which === 'date')
        this._toggle_multidate(date && new Date(date));
      if (!which || which === 'view')
        this.viewDate = date && new Date(date);

      this.fill();
      this.setValue();
      if (!which || which !== 'view') {
        this._trigger('changeDate');
      }
      if (this.inputField){
        this.inputField.change();
      }
      if (this.o.autoclose && (!which || which === 'date')){
        this.hide();
      }
    },

    moveDay: function(date, dir){
      var newDate = new Date(date);
      newDate.setUTCDate(date.getUTCDate() + dir);

      return newDate;
    },

    moveWeek: function(date, dir){
      return this.moveDay(date, dir * 7);
    },

    moveMonth: function(date, dir){
      if (!isValidDate(date))
        return this.o.defaultViewDate;
      if (!dir)
        return date;
      var new_date = new Date(date.valueOf()),
        day = new_date.getUTCDate(),
        month = new_date.getUTCMonth(),
        mag = Math.abs(dir),
        new_month, test;
      dir = dir > 0 ? 1 : -1;
      if (mag === 1){
        test = dir === -1
          // If going back one month, make sure month is not current month
          // (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
          ? function(){
            return new_date.getUTCMonth() === month;
          }
          // If going forward one month, make sure month is as expected
          // (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
          : function(){
            return new_date.getUTCMonth() !== new_month;
          };
        new_month = month + dir;
        new_date.setUTCMonth(new_month);
        // Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
        if (new_month < 0 || new_month > 11)
          new_month = (new_month + 12) % 12;
      }
      else {
        // For magnitudes >1, move one month at a time...
        for (var i=0; i < mag; i++)
          // ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
          new_date = this.moveMonth(new_date, dir);
        // ...then reset the day, keeping it in the new month
        new_month = new_date.getUTCMonth();
        new_date.setUTCDate(day);
        test = function(){
          return new_month !== new_date.getUTCMonth();
        };
      }
      // Common date-resetting loop -- if date is beyond end of month, make it
      // end of month
      while (test()){
        new_date.setUTCDate(--day);
        new_date.setUTCMonth(new_month);
      }
      return new_date;
    },

    moveYear: function(date, dir){
      return this.moveMonth(date, dir*12);
    },

    moveAvailableDate: function(date, dir, fn){
      do {
        date = this[fn](date, dir);

        if (!this.dateWithinRange(date))
          return false;

        fn = 'moveDay';
      }
      while (this.dateIsDisabled(date));

      return date;
    },

    weekOfDateIsDisabled: function(date){
      return $.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1;
    },

    dateIsDisabled: function(date){
      return (
        this.weekOfDateIsDisabled(date) ||
        $.grep(this.o.datesDisabled, function(d){
          return isUTCEquals(date, d);
        }).length > 0
      );
    },

    dateWithinRange: function(date){
      return date >= this.o.startDate && date <= this.o.endDate;
    },

    keydown: function(e){
      if (!this.picker.is(':visible')){
        if (e.keyCode === 40 || e.keyCode === 27) { // allow down to re-show picker
          this.show();
          e.stopPropagation();
        }
        return;
      }
      var dateChanged = false,
        dir, newViewDate,
        focusDate = this.focusDate || this.viewDate;
      switch (e.keyCode){
        case 27: // escape
          if (this.focusDate){
            this.focusDate = null;
            this.viewDate = this.dates.get(-1) || this.viewDate;
            this.fill();
          }
          else
            this.hide();
          e.preventDefault();
          e.stopPropagation();
          break;
        case 37: // left
        case 38: // up
        case 39: // right
        case 40: // down
          if (!this.o.keyboardNavigation || this.o.daysOfWeekDisabled.length === 7)
            break;
          dir = e.keyCode === 37 || e.keyCode === 38 ? -1 : 1;
          if (this.viewMode === 0) {
            if (e.ctrlKey){
              newViewDate = this.moveAvailableDate(focusDate, dir, 'moveYear');

              if (newViewDate)
                this._trigger('changeYear', this.viewDate);
            }
            else if (e.shiftKey){
              newViewDate = this.moveAvailableDate(focusDate, dir, 'moveMonth');

              if (newViewDate)
                this._trigger('changeMonth', this.viewDate);
            }
            else if (e.keyCode === 37 || e.keyCode === 39){
              newViewDate = this.moveAvailableDate(focusDate, dir, 'moveDay');
            }
            else if (!this.weekOfDateIsDisabled(focusDate)){
              newViewDate = this.moveAvailableDate(focusDate, dir, 'moveWeek');
            }
          } else if (this.viewMode === 1) {
            if (e.keyCode === 38 || e.keyCode === 40) {
              dir = dir * 4;
            }
            newViewDate = this.moveAvailableDate(focusDate, dir, 'moveMonth');
          } else if (this.viewMode === 2) {
            if (e.keyCode === 38 || e.keyCode === 40) {
              dir = dir * 4;
            }
            newViewDate = this.moveAvailableDate(focusDate, dir, 'moveYear');
          }
          if (newViewDate){
            this.focusDate = this.viewDate = newViewDate;
            this.setValue();
            this.fill();
            e.preventDefault();
          }
          break;
        case 13: // enter
          if (!this.o.forceParse)
            break;
          focusDate = this.focusDate || this.dates.get(-1) || this.viewDate;
          if (this.o.keyboardNavigation) {
            this._toggle_multidate(focusDate);
            dateChanged = true;
          }
          this.focusDate = null;
          this.viewDate = this.dates.get(-1) || this.viewDate;
          this.setValue();
          this.fill();
          if (this.picker.is(':visible')){
            e.preventDefault();
            e.stopPropagation();
            if (this.o.autoclose)
              this.hide();
          }
          break;
        case 9: // tab
          this.focusDate = null;
          this.viewDate = this.dates.get(-1) || this.viewDate;
          this.fill();
          this.hide();
          break;
      }
      if (dateChanged){
        if (this.dates.length)
          this._trigger('changeDate');
        else
          this._trigger('clearDate');
        if (this.inputField){
          this.inputField.change();
        }
      }
    },

    showMode: function(dir){
      if (dir){
        this.viewMode = Math.max(this.o.minViewMode, Math.min(this.o.maxViewMode, this.viewMode + dir));
      }
      this.picker
        .children('div')
        .hide()
        .filter('.datepicker-' + DPGlobal.modes[this.viewMode].clsName)
          .show();
      this.updateNavArrows();
    }
  };

  var DateRangePicker = function(element, options){
    $(element).data('datepicker', this);
    this.element = $(element);
    this.inputs = $.map(options.inputs, function(i){
      return i.jquery ? i[0] : i;
    });
    delete options.inputs;

    datepickerPlugin.call($(this.inputs), options)
      .on('changeDate', $.proxy(this.dateUpdated, this));

    this.pickers = $.map(this.inputs, function(i){
      return $(i).data('datepicker');
    });
    this.updateDates();
  };
  DateRangePicker.prototype = {
    updateDates: function(){
      this.dates = $.map(this.pickers, function(i){
        return i.getUTCDate();
      });
      this.updateRanges();
    },
    updateRanges: function(){
      var range = $.map(this.dates, function(d){
        return d.valueOf();
      });
      $.each(this.pickers, function(i, p){
        p.setRange(range);
      });
    },
    dateUpdated: function(e){
      // `this.updating` is a workaround for preventing infinite recursion
      // between `changeDate` triggering and `setUTCDate` calling.  Until
      // there is a better mechanism.
      if (this.updating)
        return;
      this.updating = true;

      var dp = $(e.target).data('datepicker');

      if (typeof(dp) === "undefined") {
        return;
      }

      var new_date = dp.getUTCDate(),
        i = $.inArray(e.target, this.inputs),
        j = i - 1,
        k = i + 1,
        l = this.inputs.length;
      if (i === -1)
        return;

      $.each(this.pickers, function(i, p){
        if (!p.getUTCDate())
          p.setUTCDate(new_date);
      });

      if (new_date < this.dates[j]){
        // Date being moved earlier/left
        while (j >= 0 && new_date < this.dates[j]){
          this.pickers[j--].setUTCDate(new_date);
        }
      }
      else if (new_date > this.dates[k]){
        // Date being moved later/right
        while (k < l && new_date > this.dates[k]){
          this.pickers[k++].setUTCDate(new_date);
        }
      }
      this.updateDates();

      delete this.updating;
    },
    remove: function(){
      $.map(this.pickers, function(p){ p.remove(); });
      delete this.element.data().datepicker;
    }
  };

  function opts_from_el(el, prefix){
    // Derive options from element data-attrs
    var data = $(el).data(),
      out = {}, inkey,
      replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])');
    prefix = new RegExp('^' + prefix.toLowerCase());
    function re_lower(_,a){
      return a.toLowerCase();
    }
    for (var key in data)
      if (prefix.test(key)){
        inkey = key.replace(replace, re_lower);
        out[inkey] = data[key];
      }
    return out;
  }

  function opts_from_locale(lang){
    // Derive options from locale plugins
    var out = {};
    // Check if "de-DE" style date is available, if not language should
    // fallback to 2 letter code eg "de"
    if (!dates[lang]){
      lang = lang.split('-')[0];
      if (!dates[lang])
        return;
    }
    var d = dates[lang];
    $.each(locale_opts, function(i,k){
      if (k in d)
        out[k] = d[k];
    });
    return out;
  }

  var old = $.fn.datepicker;
  var datepickerPlugin = function(option){
    var args = Array.apply(null, arguments);
    args.shift();
    var internal_return;
    this.each(function(){
      var $this = $(this),
        data = $this.data('datepicker'),
        options = typeof option === 'object' && option;
      if (!data){
        var elopts = opts_from_el(this, 'date'),
          // Preliminary otions
          xopts = $.extend({}, defaults, elopts, options),
          locopts = opts_from_locale(xopts.language),
          // Options priority: js args, data-attrs, locales, defaults
          opts = $.extend({}, defaults, locopts, elopts, options);
        if ($this.hasClass('input-daterange') || opts.inputs){
          $.extend(opts, {
            inputs: opts.inputs || $this.find('input').toArray()
          });
          data = new DateRangePicker(this, opts);
        }
        else {
          data = new Datepicker(this, opts);
        }
        $this.data('datepicker', data);
      }
      if (typeof option === 'string' && typeof data[option] === 'function'){
        internal_return = data[option].apply(data, args);
      }
    });

    if (
      internal_return === undefined ||
      internal_return instanceof Datepicker ||
      internal_return instanceof DateRangePicker
    )
      return this;

    if (this.length > 1)
      throw new Error('Using only allowed for the collection of a single element (' + option + ' function)');
    else
      return internal_return;
  };
  $.fn.datepicker = datepickerPlugin;

  var defaults = $.fn.datepicker.defaults = {
    assumeNearbyYear: false,
    autoclose: false,
    beforeShowDay: $.noop,
    beforeShowMonth: $.noop,
    beforeShowYear: $.noop,
    beforeShowDecade: $.noop,
    beforeShowCentury: $.noop,
    calendarWeeks: false,
    clearBtn: false,
    toggleActive: false,
    daysOfWeekDisabled: [],
    daysOfWeekHighlighted: [],
    datesDisabled: [],
    endDate: Infinity,
    forceParse: true,
    format: 'mm/dd/yyyy',
    keyboardNavigation: true,
    language: 'en',
    minViewMode: 0,
    maxViewMode: 4,
    multidate: false,
    multidateSeparator: ',',
    orientation: "auto",
    rtl: false,
    startDate: -Infinity,
    startView: 0,
    todayBtn: false,
    todayHighlight: false,
    weekStart: 0,
    disableTouchKeyboard: false,
    enableOnReadonly: true,
    showOnFocus: true,
    zIndexOffset: 10,
    container: 'body',
    immediateUpdates: false,
    title: '',
    templates: {
      leftArrow: '&laquo;',
      rightArrow: '&raquo;'
    }
  };
  var locale_opts = $.fn.datepicker.locale_opts = [
    'format',
    'rtl',
    'weekStart'
  ];
  $.fn.datepicker.Constructor = Datepicker;
  var dates = $.fn.datepicker.dates = {
    en: {
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      today: "Today",
      clear: "Clear",
      titleFormat: "MM yyyy"
    }
  };

  var DPGlobal = {
    modes: [
      {
        clsName: 'days',
        navFnc: 'Month',
        navStep: 1
      },
      {
        clsName: 'months',
        navFnc: 'FullYear',
        navStep: 1
      },
      {
        clsName: 'years',
        navFnc: 'FullYear',
        navStep: 10
      },
      {
        clsName: 'decades',
        navFnc: 'FullDecade',
        navStep: 100
      },
      {
        clsName: 'centuries',
        navFnc: 'FullCentury',
        navStep: 1000
    }],
    isLeapYear: function(year){
      return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
    },
    getDaysInMonth: function(year, month){
      return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    },
    validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
    nonpunctuation: /[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g,
    parseFormat: function(format){
      if (typeof format.toValue === 'function' && typeof format.toDisplay === 'function')
                return format;
            // IE treats \0 as a string end in inputs (truncating the value),
      // so it's a bad format delimiter, anyway
      var separators = format.replace(this.validParts, '\0').split('\0'),
        parts = format.match(this.validParts);
      if (!separators || !separators.length || !parts || parts.length === 0){
        throw new Error("Invalid date format.");
      }
      return {separators: separators, parts: parts};
    },
    parseDate: function(date, format, language, assumeNearby){
      if (!date)
        return undefined;
      if (date instanceof Date)
        return date;
      if (typeof format === 'string')
        format = DPGlobal.parseFormat(format);
      if (format.toValue)
                return format.toValue(date, format, language);
            var part_re = /([\-+]\d+)([dmwy])/,
        parts = date.match(/([\-+]\d+)([dmwy])/g),
        fn_map = {
          d: 'moveDay',
          m: 'moveMonth',
          w: 'moveWeek',
          y: 'moveYear'
        },
        dateAliases = {
          yesterday: '-1d',
          today: '+0d',
          tomorrow: '+1d'
        },
        part, dir, i, fn;
      if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(date)){
        date = new Date();
        for (i=0; i < parts.length; i++){
          part = part_re.exec(parts[i]);
          dir = parseInt(part[1]);
          fn = fn_map[part[2]];
          date = Datepicker.prototype[fn](date, dir);
        }
        return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      }

      if (typeof dateAliases[date] !== 'undefined') {
        date = dateAliases[date];
        parts = date.match(/([\-+]\d+)([dmwy])/g);

        if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(date)){
          date = new Date();
            for (i=0; i < parts.length; i++){
            part = part_re.exec(parts[i]);
            dir = parseInt(part[1]);
            fn = fn_map[part[2]];
            date = Datepicker.prototype[fn](date, dir);
            }

            return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
        }
      }

      parts = date && date.match(this.nonpunctuation) || [];
      date = new Date();

      function applyNearbyYear(year, threshold){
        if (threshold === true)
          threshold = 10;

        // if year is 2 digits or less, than the user most likely is trying to get a recent century
        if (year < 100){
          year += 2000;
          // if the new year is more than threshold years in advance, use last century
          if (year > ((new Date()).getFullYear()+threshold)){
            year -= 100;
          }
        }

        return year;
      }

      var parsed = {},
        setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],
        setters_map = {
          yyyy: function(d,v){
            return d.setUTCFullYear(assumeNearby ? applyNearbyYear(v, assumeNearby) : v);
          },
          yy: function(d,v){
            return d.setUTCFullYear(assumeNearby ? applyNearbyYear(v, assumeNearby) : v);
          },
          m: function(d,v){
            if (isNaN(d))
              return d;
            v -= 1;
            while (v < 0) v += 12;
            v %= 12;
            d.setUTCMonth(v);
            while (d.getUTCMonth() !== v)
              d.setUTCDate(d.getUTCDate()-1);
            return d;
          },
          d: function(d,v){
            return d.setUTCDate(v);
          }
        },
        val, filtered;
      setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
      setters_map['dd'] = setters_map['d'];
      date = UTCToday();
      var fparts = format.parts.slice();
      // Remove noop parts
      if (parts.length !== fparts.length){
        fparts = $(fparts).filter(function(i,p){
          return $.inArray(p, setters_order) !== -1;
        }).toArray();
      }
      // Process remainder
      function match_part(){
        var m = this.slice(0, parts[i].length),
          p = parts[i].slice(0, m.length);
        return m.toLowerCase() === p.toLowerCase();
      }
      if (parts.length === fparts.length){
        var cnt;
        for (i=0, cnt = fparts.length; i < cnt; i++){
          val = parseInt(parts[i], 10);
          part = fparts[i];
          if (isNaN(val)){
            switch (part){
              case 'MM':
                filtered = $(dates[language].months).filter(match_part);
                val = $.inArray(filtered[0], dates[language].months) + 1;
                break;
              case 'M':
                filtered = $(dates[language].monthsShort).filter(match_part);
                val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
                break;
            }
          }
          parsed[part] = val;
        }
        var _date, s;
        for (i=0; i < setters_order.length; i++){
          s = setters_order[i];
          if (s in parsed && !isNaN(parsed[s])){
            _date = new Date(date);
            setters_map[s](_date, parsed[s]);
            if (!isNaN(_date))
              date = _date;
          }
        }
      }
      return date;
    },
    formatDate: function(date, format, language){
      if (!date)
        return '';
      if (typeof format === 'string')
        format = DPGlobal.parseFormat(format);
      if (format.toDisplay)
                return format.toDisplay(date, format, language);
            var val = {
        d: date.getUTCDate(),
        D: dates[language].daysShort[date.getUTCDay()],
        DD: dates[language].days[date.getUTCDay()],
        m: date.getUTCMonth() + 1,
        M: dates[language].monthsShort[date.getUTCMonth()],
        MM: dates[language].months[date.getUTCMonth()],
        yy: date.getUTCFullYear().toString().substring(2),
        yyyy: date.getUTCFullYear()
      };
      val.dd = (val.d < 10 ? '0' : '') + val.d;
      val.mm = (val.m < 10 ? '0' : '') + val.m;
      date = [];
      var seps = $.extend([], format.separators);
      for (var i=0, cnt = format.parts.length; i <= cnt; i++){
        if (seps.length)
          date.push(seps.shift());
        date.push(val[format.parts[i]]);
      }
      return date.join('');
    },
    headTemplate: '<thead>'+
                    '<tr>'+
                      '<th colspan="7" class="datepicker-title"></th>'+
                    '</tr>'+
              '<tr>'+
                '<th class="prev">&laquo;</th>'+
                '<th colspan="5" class="datepicker-switch"></th>'+
                '<th class="next">&raquo;</th>'+
              '</tr>'+
            '</thead>',
    contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
    footTemplate: '<tfoot>'+
              '<tr>'+
                '<th colspan="7" class="today"></th>'+
              '</tr>'+
              '<tr>'+
                '<th colspan="7" class="clear"></th>'+
              '</tr>'+
            '</tfoot>'
  };
  DPGlobal.template = '<div class="datepicker">'+
              '<div class="datepicker-days">'+
                '<table class="table-condensed">'+
                  DPGlobal.headTemplate+
                  '<tbody></tbody>'+
                  DPGlobal.footTemplate+
                '</table>'+
              '</div>'+
              '<div class="datepicker-months">'+
                '<table class="table-condensed">'+
                  DPGlobal.headTemplate+
                  DPGlobal.contTemplate+
                  DPGlobal.footTemplate+
                '</table>'+
              '</div>'+
              '<div class="datepicker-years">'+
                '<table class="table-condensed">'+
                  DPGlobal.headTemplate+
                  DPGlobal.contTemplate+
                  DPGlobal.footTemplate+
                '</table>'+
              '</div>'+
              '<div class="datepicker-decades">'+
                '<table class="table-condensed">'+
                  DPGlobal.headTemplate+
                  DPGlobal.contTemplate+
                  DPGlobal.footTemplate+
                '</table>'+
              '</div>'+
              '<div class="datepicker-centuries">'+
                '<table class="table-condensed">'+
                  DPGlobal.headTemplate+
                  DPGlobal.contTemplate+
                  DPGlobal.footTemplate+
                '</table>'+
              '</div>'+
            '</div>';

  $.fn.datepicker.DPGlobal = DPGlobal;


  /* DATEPICKER NO CONFLICT
  * =================== */

  $.fn.datepicker.noConflict = function(){
    $.fn.datepicker = old;
    return this;
  };

  /* DATEPICKER VERSION
  * =================== */
  $.fn.datepicker.version = '1.6.4';

  /* DATEPICKER DATA-API
  * ================== */

  $(document).on(
    'focus.datepicker.data-api click.datepicker.data-api',
    '[data-provide="datepicker"]',
    function(e){
      var $this = $(this);
      if ($this.data('datepicker'))
        return;
      e.preventDefault();
      // component click requires us to explicitly show it
      datepickerPlugin.call($this, 'show');
    }
  );
  $(function(){
    datepickerPlugin.call($('[data-provide="datepicker-inline"]'));
  });

  }));
</script>

<%# ##################### bootstrap-combobox.js ##################### %>
<script>
  !function( $ ) {

    "use strict";
  
    /* COMBOBOX PUBLIC CLASS DEFINITION
    * ================================ */
  
    var Combobox = function ( element, options ) {
      this.options = $.extend({}, $.fn.combobox.defaults, options);
      this.$source = $(element);
      this.$container = this.setup();
      this.$element = this.$container.find('input[type=text]');
      this.$target = this.$container.find('input[type=hidden]');
      this.$button = this.$container.find('.dropdown-toggle');
      this.$menu = $(this.options.menu).appendTo('body');
      this.template = this.options.template || this.template
      this.matcher = this.options.matcher || this.matcher;
      this.sorter = this.options.sorter || this.sorter;
      this.highlighter = this.options.highlighter || this.highlighter;
      this.shown = false;
      this.selected = false;
      this.refresh();
      this.transferAttributes();
      this.listen();
    };
  
    Combobox.prototype = {
  
      constructor: Combobox
  
    , setup: function () {
        var combobox = $(this.template());
        this.$source.before(combobox);
        this.$source.hide();
        return combobox;
      }
  
    , disable: function() {
        this.$element.prop('disabled', true);
        this.$button.attr('disabled', true);
        this.disabled = true;
        this.$container.addClass('combobox-disabled');
      }
  
    , enable: function() {
        this.$element.prop('disabled', false);
        this.$button.attr('disabled', false);
        this.disabled = false;
        this.$container.removeClass('combobox-disabled');
      }
    , parse: function () {
        var that = this
          , map = {}
          , source = []
          , selected = false
          , selectedValue = '';
        this.$source.find('option').each(function() {
          var option = $(this);
          if (option.val() === '') {
            that.options.placeholder = option.text();
            return;
          }
          map[option.text()] = option.val();
          source.push(option.text());
          if (option.prop('selected')) {
            selected = option.text();
            selectedValue = option.val();
          }
        })
        this.map = map;
        if (selected) {
          this.$element.val(selected);
          this.$target.val(selectedValue);
          this.$container.addClass('combobox-selected');
          this.selected = true;
        }
        return source;
      }
  
    , transferAttributes: function() {
      this.options.placeholder = this.$source.attr('data-placeholder') || this.options.placeholder
      this.$element.attr('placeholder', this.options.placeholder)
      this.$target.prop('name', this.$source.prop('name'))
      this.$target.val(this.$source.val())
      this.$source.removeAttr('name')  // Remove from source otherwise form will pass parameter twice.
      this.$element.attr('required', this.$source.attr('required'))
      this.$element.attr('rel', this.$source.attr('rel'))
      this.$element.attr('title', this.$source.attr('title'))
      this.$element.attr('class', this.$source.attr('class'))
      this.$element.attr('tabindex', this.$source.attr('tabindex'))
      this.$source.removeAttr('tabindex')
      if (this.$source.attr('disabled')!==undefined)
        this.disable();
    }
  
    , select: function () {
        var val = this.$menu.find('.active').attr('data-value');
        this.$element.val(this.updater(val)).trigger('change');
        this.$target.val(this.map[val]).trigger('change');
        this.$source.val(this.map[val]).trigger('change');
        this.$container.addClass('combobox-selected');
        this.selected = true;
        return this.hide();
      }
  
    , updater: function (item) {
        return item;
      }
  
    , show: function () {
        var pos = $.extend({}, this.$element.position(), {
          height: this.$element[0].offsetHeight
        });
  
        this.$menu
          .insertAfter(this.$element)
          .css({
            top: pos.top + pos.height
          , left: pos.left
          })
          .show();
  
        $('.dropdown-menu').on('mousedown', $.proxy(this.scrollSafety, this));
  
        this.shown = true;
        return this;
      }
  
    , hide: function () {
        this.$menu.hide();
        $('.dropdown-menu').off('mousedown', $.proxy(this.scrollSafety, this));
        this.$element.on('blur', $.proxy(this.blur, this));
        this.shown = false;
        return this;
      }
  
    , lookup: function (event) {
        this.query = this.$element.val();
        return this.process(this.source);
      }
  
    , process: function (items) {
        var that = this;
  
        items = $.grep(items, function (item) {
          return that.matcher(item);
        })
  
        items = this.sorter(items);
  
        if (!items.length) {
          return this.shown ? this.hide() : this;
        }
  
        return this.render(items.slice(0, this.options.items)).show();
      }
  
    , template: function() {
        if (this.options.bsVersion == '2') {
          return '<div class="combobox-container"><input type="hidden" /> <div class="input-append"> <input type="text" autocomplete="off" /> <span class="add-on dropdown-toggle" data-dropdown="dropdown"> <span class="caret"/> <i class="icon-remove"/> </span> </div> </div>'
        } else {
          return '<div class="combobox-container"> <input type="hidden" /> <div class="input-group"> <input type="text" autocomplete="off" /> <span class="input-group-addon dropdown-toggle" data-dropdown="dropdown"> <span class="caret" /> <span class="glyphicon glyphicon-remove" /> </span> </div> </div>'
        }
      }
  
    , matcher: function (item) {
        return ~item.toLowerCase().indexOf(this.query.toLowerCase());
      }
  
    , sorter: function (items) {
        var beginswith = []
          , caseSensitive = []
          , caseInsensitive = []
          , item;
  
        while (item = items.shift()) {
          if (!item.toLowerCase().indexOf(this.query.toLowerCase())) {beginswith.push(item);}
          else if (~item.indexOf(this.query)) {caseSensitive.push(item);}
          else {caseInsensitive.push(item);}
        }
  
        return beginswith.concat(caseSensitive, caseInsensitive);
      }
  
    , highlighter: function (item) {
        var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
        return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
          return '<strong>' + match + '</strong>';
        })
      }
  
    , render: function (items) {
        var that = this;
  
        items = $(items).map(function (i, item) {
          i = $(that.options.item).attr('data-value', item);
          i.find('a').html(that.highlighter(item));
          return i[0];
        })
  
        items.first().addClass('active');
        this.$menu.html(items);
        return this;
      }
  
    , next: function (event) {
        var active = this.$menu.find('.active').removeClass('active')
          , next = active.next();
  
        if (!next.length) {
          next = $(this.$menu.find('li')[0]);
        }
  
        next.addClass('active');
      }
  
    , prev: function (event) {
        var active = this.$menu.find('.active').removeClass('active')
          , prev = active.prev();
  
        if (!prev.length) {
          prev = this.$menu.find('li').last();
        }
  
        prev.addClass('active');
      }
  
    , toggle: function () {
      if (!this.disabled) {
        if (this.$container.hasClass('combobox-selected')) {
          this.clearTarget();
          this.triggerChange();
          this.clearElement();
        } else {
          if (this.shown) {
            this.hide();
          } else {
            this.clearElement();
            this.lookup();
          }
        }
      }
    }
  
    , scrollSafety: function(e) {
        if (e.target.tagName == 'UL') {
            this.$element.off('blur');
        }
    }
    , clearElement: function () {
      this.$element.val('').focus();
    }
  
    , clearTarget: function () {
      this.$source.val('');
      this.$target.val('');
      this.$container.removeClass('combobox-selected');
      this.selected = false;
    }
  
    , triggerChange: function () {
      this.$source.trigger('change');
    }
  
    , refresh: function () {
      this.source = this.parse();
      this.options.items = this.source.length;
    }
  
    , listen: function () {
        this.$element
          .on('focus',    $.proxy(this.focus, this))
          .on('blur',     $.proxy(this.blur, this))
          .on('keypress', $.proxy(this.keypress, this))
          .on('keyup',    $.proxy(this.keyup, this));
  
        if (this.eventSupported('keydown')) {
          this.$element.on('keydown', $.proxy(this.keydown, this));
        }
  
        this.$menu
          .on('click', $.proxy(this.click, this))
          .on('mouseenter', 'li', $.proxy(this.mouseenter, this))
          .on('mouseleave', 'li', $.proxy(this.mouseleave, this));
  
        this.$button
          .on('click', $.proxy(this.toggle, this));
      }
  
    , eventSupported: function(eventName) {
        var isSupported = eventName in this.$element;
        if (!isSupported) {
          this.$element.setAttribute(eventName, 'return;');
          isSupported = typeof this.$element[eventName] === 'function';
        }
        return isSupported;
      }
  
    , move: function (e) {
        if (!this.shown) {return;}
  
        switch(e.keyCode) {
          case 9: // tab
          case 13: // enter
          case 27: // escape
            e.preventDefault();
            break;
  
          case 38: // up arrow
            e.preventDefault();
            this.prev();
            break;
  
          case 40: // down arrow
            e.preventDefault();
            this.next();
            break;
        }
  
        e.stopPropagation();
      }
  
    , keydown: function (e) {
        this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40,38,9,13,27]);
        this.move(e);
      }
  
    , keypress: function (e) {
        if (this.suppressKeyPressRepeat) {return;}
        this.move(e);
      }
  
    , keyup: function (e) {
        switch(e.keyCode) {
          case 40: // down arrow
          case 39: // right arrow
          case 38: // up arrow
          case 37: // left arrow
          case 36: // home
          case 35: // end
          case 16: // shift
          case 17: // ctrl
          case 18: // alt
            break;
  
          case 9: // tab
          case 13: // enter
            if (!this.shown) {return;}
            this.select();
            break;
  
          case 27: // escape
            if (!this.shown) {return;}
            this.hide();
            break;
  
          default:
            this.clearTarget();
            this.lookup();
        }
  
        e.stopPropagation();
        e.preventDefault();
    }
  
    , focus: function (e) {
        this.focused = true;
      }
  
    , blur: function (e) {
        var that = this;
        this.focused = false;
        var val = this.$element.val();
        if (!this.selected && val !== '' ) {
          this.$element.val('');
          this.$source.val('').trigger('change');
          this.$target.val('').trigger('change');
        }
        if (!this.mousedover && this.shown) {setTimeout(function () { that.hide(); }, 200);}
      }
  
    , click: function (e) {
        e.stopPropagation();
        e.preventDefault();
        this.select();
        this.$element.focus();
      }
  
    , mouseenter: function (e) {
        this.mousedover = true;
        this.$menu.find('.active').removeClass('active');
        $(e.currentTarget).addClass('active');
      }
  
    , mouseleave: function (e) {
        this.mousedover = false;
      }
    };
  
    /* COMBOBOX PLUGIN DEFINITION
      * =========================== */
    $.fn.combobox = function ( option ) {
      return this.each(function () {
        var $this = $(this)
          , data = $this.data('combobox')
          , options = typeof option == 'object' && option;
        if(!data) {$this.data('combobox', (data = new Combobox(this, options)));}
        if (typeof option == 'string') {data[option]();}
      });
    };
  
    $.fn.combobox.defaults = {
      bsVersion: '3'
    , menu: '<ul class="typeahead typeahead-long dropdown-menu"></ul>'
    , item: '<li><a href="#"></a></li>'
    };
  
    $.fn.combobox.Constructor = Combobox;
  
  }( window.jQuery ); 
</script>

<%# ##################### harvard_aeon_form.js ##################### %>
<script>
  $(function() {


    $.fn.combobox.defaults.template = '<div class="combobox-container input-group"><input type="hidden" /><input type="text" autocomplete="off"/><span class="input-group-btn btn dropdown-toggle" data-dropdown="dropdown"><span class="caret"/><span class="combobox-clear"><span class="icon-remove"></span></span></span></div>';
    $(function() {
      var initDateFields = function(scope) {
        scope = scope || $(document.body);
        $(".date-field:not(.initialised)", scope).each(function() {
          var $dateInput = $(this);

          if ($dateInput.parent().is(".input-group")) {
            $dateInput.parent().addClass("date");
          } else {
            $dateInput.wrap("<div class='input-group date'></div>");
          }

          $dateInput.addClass("initialised");

          var $addon = $("<span class='input-group-addon'><i class='glyphicon glyphicon-calendar'></i></span>");
          $dateInput.after($addon);

          $dateInput.datepicker($dateInput.data());

          $addon.on("click", function() {
            $dateInput.focus().select();
          });
        });
      };
      initDateFields();
    });


    $("#request_type_select").change(function() {
      var selected = this.selectedOptions[0];
      var inputs = JSON.parse(selected.getAttribute("value"));
      for(var name in inputs) {
        $(this).parents('.rl-form').find("input[name=" + name + "]").attr("value", inputs[name]);
      }
      $('.rl-ha-options-form').hide();
      $('.rl-ha-item-form').hide();
      if (selected.text == 'Reading room') {
        $("#rl-readingroom-options-form").show();
        $(".rl-ha-additional-fields").slideDown();
        $('.rl-ha-questions-label').html($('.rl-ha-questions-label').data('other-label'));
        $('.rl-ha-questions-input').attr('title', $('.rl-ha-questions-input').data('other-help'));
      } else if (selected.text == 'Saved') {
        $("#rl-saved-options-form").show();
        $(".rl-ha-additional-fields").slideDown();
        $('.rl-ha-questions-label').html($('.rl-ha-questions-label').data('other-label'));
        $('.rl-ha-questions-input').attr('title', $('.rl-ha-questions-input').data('other-help'));
      } else if (selected.text == 'Photoduplication') {
        $("#rl-photoduplication-options-form").show();
        $(".rl-ha-additional-fields").slideDown();
        $('.rl-ha-questions-label').html($('.rl-ha-questions-label').data('photoduplication-label'));
        $('.rl-ha-questions-input').attr('title', $('.rl-ha-questions-input').data('photoduplication-help'));
      } else {
        $(".rl-ha-additional-fields").slideUp('normal', function() {
          var form = $(".rl-ha-options-form");
          form.hide();
          form.find("select").val("");
          form.find("textarea").val("");
          form.find("input").val("");
        });
      }
    });


    $('.rl-ha-list-input').on('change keyup paste', function() {
      $(this).css('border', '1px solid #ccc');
      var srcVal = $(this).val();
      if (srcVal.length > 20) { srcVal = srcVal.substr(0,20) + '...' }
      var itemForms = $('.rl-ha-item-form-' + $(this).parents('.rl-ha-options-form').data('request-type'));
      itemForms.find('[name^="' + $(this).attr('name') + '_"]').attr('placeholder', srcVal);

      if ($(this).is('select')) {
        var selected = this.selectedOptions[0].text;
        if (selected != '...') { selected = '(' + selected + ')' }

        itemForms.find('select[name^="' + $(this).attr('name') + '_"]').children('option:first-child').text(selected);
      }
    });

    $('.rl-ha-item-input').on('change keyup paste', function() {
      var allInputs = $(this).parents('.rl-ha-item-form-table').find('.rl-ha-item-input');
      if (allInputs.filter(function() { return $(this).val() != ''}).length > 0) {
        $(this).parents('.rl-list-item').find('.rl-edited-indicator').show();
      } else {
        $(this).parents('.rl-list-item').find('.rl-edited-indicator').hide();
      }
    });

    $('.rl-ha-expand-help').click(function(e) {
      $('.rl-ha-expanded-help').slideToggle('normal',
              function() {
                  var expandHelp = $('.rl-ha-expand-help');
                  var label = expandHelp.data('expand-label');
                  if ($(this).is(':visible')) {
                label = expandHelp.data('collapse-label');
                  }
                  expandHelp.html(label);
        });
    });

  });
</script>


<% handler.list_map.each do |name, value| %>
  <input type="hidden" name="<%= name %>" value="<%= value  %>">
<% end %>


<a class="pull-right rl-ha-aeon-link"
   title="<%= t('plugin.request_list.aeon_button_label') %>"
   href="<%= handler.list_opts[:aeon_link_url]  %>"
   target="<%= handler.list_opts.fetch(:form_target, '_self') %>">

  <%= t("plugin.request_list.aeon_button_label") %>
</a>


<div class="rl-message rl-message-title">

  <div class="rl-ha-collapsed-help">
    <%= t('plugin.request_list.title_message').html_safe %>
  </div>

  <h7><b class='serif'><%= t('plugin.request_list.expanded_help_title').html_safe %></b></h7>
  <div class="rl-ha-expanded-help" style="display:none">
    <ul style='padding-right: 20px'>
      <% t('plugin.request_list.expanded_help_elements').each do |str| %>
        <li class="expanded_help_list_item"><p class='serif'><%=str.html_safe%></p></li>
      <%end%>
    </ul>
  </div>
</div>

<a class="rl-ha-expand-help"
   title="<%= t('plugin.request_list.expand_help_message') %>"
   data-expand-label="<%= t('plugin.request_list.expand_help_label') %>"
   data-collapse-label="<%= t('plugin.request_list.collapse_help_label') %>"
   href="javascript:void(0);">

  <%= t('plugin.request_list.expand_help_label') %>
</a>


<div class="row">
  <div class="col-sm-10 no-pad">
    <div class="rl-request-form-header">
      <%= t('plugin.request_list.request_form_subtitle')  %>
    </div>
  </div>
</div>

<div class="row">

  <div class="col-sm-3">
    <div class="form-group rl-ha-type-select">
      <label class="control-label"><%= t('plugin.request_list.options.request_type') %></label>
      <div class="">
        <select name="request_type" id="request_type_select" class="form-control">
          <% handler.list_opts[:request_types].each do |type, values| %>
            <option value="<%= ASUtils.to_json(values) %>"><%= type %></option>
          <% end %>         
        </select>
      </div>
    </div>
  </div>


  <div class="rl-ha-additional-fields">

    <div class="rl-ha-options-form" id="rl-readingroom-options-form" data-request-type="readingroom">

      <div class="form-group col-sm-4">
        <label class="control-label" title="Required"><%= t('plugin.request_list.options.date') %> *</label>
        <div class="input-group datepicker rl-datepicker">
          <input class="date-field form-control rl-ha-list-input required"
                 title="<%= t('plugin.request_list.options.date_help') %>"
                 data-format="mm/dd/yyyy"
                 data-date="<%= Date.today.strftime('%m/%d/%Y') %>"
                 data-date-start-date="<%= Date.today.strftime('%m/%d/%Y') %>"
                 data-autoclose="true"
                 data-force-parse="true"
                 placeholder="MM/DD/YYYY"
                 name="ScheduledDate">
        </div>
      </div>

    </div>


    <div class="rl-ha-options-form" id="rl-saved-options-form" data-request-type="saved">
      <span></span>
    </div>


    <div class="rl-ha-options-form" id="rl-photoduplication-options-form" data-request-type="photoduplication">
      <div class="form-group col-sm-3">
        <label class="control-label" title="Required"><%= t('plugin.request_list.options.format') %> *</label>
        <select name="Format" class="form-control rl-ha-list-input required">
          <option value="">...</option>
          <% handler.list_opts[:format_options].each do |option| %>
            <option value="<%= option %>"><%= option %></option>
          <% end %>
        </select>
      </div>

      <div class="form-group col-sm-3">
        <label class="control-label" title="Required"><%= t('plugin.request_list.options.delivery') %> *</label>
        <select name="ShippingOption" class="form-control rl-ha-list-input required">
          <option value="">...</option>
          <% handler.list_opts[:delivery_options].each do |option| %>
            <option value="<%= option %>"><%= option %></option>
          <% end %>
        </select>
      </div>

      <div class="form-group col-sm-2" style="padding-top: 20px">
        <label class="control-label" style="display:inline"><%= t('plugin.request_list.options.for_publication') %></label>
        &nbsp;
        <input type="checkbox" name="ForPublication" class="rl-ha-list-input" style="display:inline" value="Yes"/>
      </div>
    </div>
  </div>
</div>



<div class="row">

  <div class="form-group rl-ha-notes-and-questions col-sm-5">
    <div class="form-group">
      <label class="control-label"><%= t('plugin.request_list.options.notes') %></label>
      <textarea name="Notes"
                rows="3"
                class="form-control rl-ha-list-input"
                title="<%= t('plugin.request_list.options.notes_help') %>"
                maxlength="65536"></textarea>
    </div>
  </div>

  <div class="form-group rl-ha-notes-and-questions col-sm-5">
    <div class="form-group">
      <label class="control-label rl-ha-questions-label"
             data-photoduplication-label="<%= t('plugin.request_list.options.photoduplication_instructions') %>"
             data-other-label="<%= t('plugin.request_list.options.questions') %>">
        <%= t('plugin.request_list.options.questions') %>
      </label>
      <textarea name="SpecialRequest"
                rows="3"
                class="form-control rl-ha-list-input rl-ha-questions-input"
                title="<%= t('plugin.request_list.options.questions_help') %>"
                data-photoduplication-help="<%= t('plugin.request_list.options.photoduplication_instructions_help') %>"
                data-other-help="<%= t('plugin.request_list.options.questions_help') %>"
                maxlength="255"></textarea>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-sm-8"></div>
  <div class="col-sm-2">
    <div class="pull-right" style="padding-top:20px">
      <button type="submit" class="btn btn-primary submit-requests"><%= t('plugin.request_list.submit_button_label') %></button>
    </div>
  </div>
</div>


